# チケット管理プロジェクト - Cursor ルール

## プロジェクト概要
Reactフロントエンドと Ruby on Rails バックエンドで構築されたチケット管理システムです。

## 開発環境
- **OS**: macOS
- **Docker**: パフォーマンス問題を避けるため使用しない
- **データベース**: MySQL (ユーザー: root, パスワード: 空, データベース: ticket_manager)

## 技術スタック

### フロントエンド
- **フレームワーク**: React
- **言語**: TypeScript
- **CSS**: シンプルなCSSフレームワークを使用 (例: Tailwind CSS, Bootstrap, CSS Modules)
- **テスト**: Jest
- **ディレクトリ**: `./frontend/`

### バックエンド
- **フレームワーク**: Ruby on Rails (最新安定版を使用)
- **言語**: Ruby (バージョン 3.2+ または最新安定版)
- **API ドキュメント**: Swagger (定期的に更新・メンテナンス)
- **テスト**: RSpec
- **ディレクトリ**: `./backend/`

### データベース
- **タイプ**: MySQL
- **設定**:
  - ユーザー: root
  - パスワード: (空)
  - データベース名: ticket_manager

## ディレクトリ構造
```
/Users/user/Development/ticket-manager/
├── backend/          # Ruby on Rails アプリケーション
├── frontend/         # React アプリケーション
├── shared/           # 共通ファイルとユーティリティ
├── README.md         # プロジェクトドキュメント
└── .cursorrules      # このファイル
```

## 開発ガイドライン

### コード品質・スタイル
- **簡潔さよりも可読性**: 可読性が向上するなら多少冗長なコードを書く
- **抽象よりも具象**: 過度な抽象化よりも具体的な実装を優先
- **一貫性**: 一貫した命名規則とコード構造に従う
- **ドキュメント**: 複雑なロジックとAPIエンドポイントを文書化

### テスト戦略
- **フロントエンド**: Jestを使用してユニットテストと統合テスト
- **バックエンド**: RSpecを使用した包括的なテスト (モデル、コントローラー、サービス)
- **カバレッジ**: 良いテストカバレッジを維持するが、意味のあるテストを優先

### Git & CI/CD
- **CI**: GitHub Actions を使用
- **要件**: すべてのテストが通り、ビルドが成功すること
- **ブランチ**: 原則としてdevブランチを使用、PRレビューを必須とする

## ファイル命名規則
- **React コンポーネント**: PascalCase (例: `TicketCard.tsx`)
- **ユーティリティ**: camelCase (例: `dateUtils.ts`)
- **Rails モデル**: snake_case (例: `ticket_manager.rb`)
- **Rails コントローラー**: snake_case (例: `tickets_controller.rb`)

## API ガイドライン
- **RESTful**: REST規約に従う
- **Swagger**: すべてのエンドポイントでSwaggerドキュメントを最新に保つ
- **エラーハンドリング**: 一貫したエラーレスポンス形式
- **バージョニング**: 必要に応じてAPIバージョニングを使用

## データベースガイドライン
- **マイグレーション**: 常にRailsマイグレーションを使用
- **シード**: 開発用のシードデータを維持
- **インデックス**: パフォーマンスのため適切なデータベースインデックスを追加

## デプロイメント
- **現在の状況**: デプロイ戦略は未定
- **将来**: デプロイが必要になった際にコンテナ化オプションを検討

## 追加技術の採用
- 論理的な必要性がある場合、追加技術を採用してよい
- 必ずこのファイルに新しい追加を文書化する
- 選択の理由を説明し、関連セクションを更新する

## コマンドリファレンス

### フロントエンド開発
```bash
cd frontend
npm install
npm start          # 開発サーバー
npm test           # テスト実行
npm run build      # プロダクションビルド
```

### バックエンド開発
```bash
cd backend
bundle install
rails server       # 開発サーバー
bundle exec rspec  # テスト実行
rails db:migrate   # マイグレーション実行
rails db:seed      # データベースシード
```

### データベースセットアップ
```bash
# backendディレクトリから
rails db:create
rails db:migrate
rails db:seed
```

## 注意事項
- 依存関係は最小限に抑え、十分な理由付けを行う
- 確立された、よくメンテナンスされたパッケージを優先
- 定期的な依存関係の更新とセキュリティパッチ
- パフォーマンスを監視し、必要に応じて最適化を行う 