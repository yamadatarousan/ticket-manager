# チケット管理プロジェクト - Cursor ルール

## プロジェクト概要
Reactフロントエンドと Ruby on Rails バックエンドで構築されたチケット管理システムです。BacklogやRedmineを参考に

## 開発環境
- **OS**: macOS
- **Docker**: パフォーマンス問題を避けるため使用しない
- **データベース**: MySQL (ユーザー: root, パスワード: 空, データベース: ticket_manager)

## 技術スタック

### フロントエンド
- **フレームワーク**: React (Create React App with TypeScript)
- **言語**: TypeScript
- **CSS**: Tailwind CSS (CDN版)
- **ビルドツール**: Create React App (標準設定)
- **テスト**: Jest
- **ディレクトリ**: `./frontend/`

#### フロントエンド環境構築済み
- Create React App with TypeScript template
- Tailwind CSS CDN版（`https://cdn.tailwindcss.com`）
- PostCSS/CRACO不要のシンプルな構成
- 本番環境では別途ビルド版Tailwindに移行予定

### バックエンド
- **フレームワーク**: Ruby on Rails (最新安定版を使用)
- **言語**: Ruby (バージョン 3.2+ または最新安定版)
- **API ドキュメント**: Swagger (定期的に更新・メンテナンス)
- **テスト**: RSpec
- **ディレクトリ**: `./backend/`

### データベース
- **タイプ**: MySQL
- **設定**:
  - ユーザー: root
  - パスワード: (空)
  - データベース名: ticket_manager

## ディレクトリ構造
```
/Users/user/Development/ticket-manager/
├── backend/          # Ruby on Rails アプリケーション
├── frontend/         # React アプリケーション
├── shared/           # 共通ファイルとユーティリティ
├── README.md         # プロジェクトドキュメント
└── .cursorrules      # このファイル
```

## 開発ガイドライン

### コード品質・スタイル
- **簡潔さよりも可読性**: 可読性が向上するなら多少冗長なコードを書く
- **抽象よりも具象**: 過度な抽象化よりも具体的な実装を優先
- **一貫性**: 一貫した命名規則とコード構造に従う
- **ドキュメント**: 複雑なロジックとAPIエンドポイントを文書化

### テスト戦略
- **フロントエンド**: Jestを使用してユニットテストと統合テスト
- **バックエンド**: RSpecを使用した包括的なテスト (モデル、コントローラー、サービス)
- **カバレッジ**: 良いテストカバレッジを維持するが、意味のあるテストを優先
- **テスト名、テストメソッド名**: すべて日本語で書くこと

### Git & CI/CD
- **CI**: GitHub Actions を使用
- **要件**: すべてのテストが通り、ビルドが成功すること
- **ブランチ**: 原則としてdevブランチを使用、PRレビューを必須とする

## ファイル命名規則
- **React コンポーネント**: PascalCase (例: `TicketCard.tsx`)
- **ユーティリティ**: camelCase (例: `dateUtils.ts`)
- **Rails モデル**: snake_case (例: `ticket_manager.rb`)
- **Rails コントローラー**: snake_case (例: `tickets_controller.rb`)

## API ガイドライン
- **RESTful**: REST規約に従う
- **Swagger**: すべてのエンドポイントでSwaggerドキュメントを最新に保つ
- **エラーハンドリング**: 一貫したエラーレスポンス形式
- **バージョニング**: 必要に応じてAPIバージョニングを使用

## データベースガイドライン
- **マイグレーション**: 常にRailsマイグレーションを使用
- **シード**: 開発用のシードデータを維持
- **インデックス**: パフォーマンスのため適切なデータベースインデックスを追加

## デプロイメント
- **現在の状況**: デプロイ戦略は未定
- **将来**: デプロイが必要になった際にコンテナ化オプションを検討

## 追加技術の採用
- 論理的な必要性がある場合、追加技術を採用してよい
- 必ずこのファイルに新しい追加を文書化する
- 選択の理由を説明し、関連セクションを更新する

## フロントエンドテストガイドライン

### テスト作成の基本原則
1. **実装の理解を優先**
   - テスト作成前に、対象コンポーネントの実装を完全に理解する
   - 表示テキスト、状態管理、非同期処理の流れを把握する

2. **段階的なテスト作成**
   - 基本機能のテストが安定してから、追加機能のテストを書く
   - 既存のテストが失敗している場合は、新規テストの追加を控える

3. **モックの適切な使用**
   - `jest.mock`はファイルの先頭で宣言
   - モックの参照は`require`で取得
   - モックの振る舞いは`beforeEach`で設定

4. **非同期処理の適切な扱い**
   - `waitFor`の使用は必要最小限に
   - 非同期処理の完了を確実に待機
   - タイムアウトの適切な設定

### テストの品質基準
1. **信頼性**
   - テストは常に同じ結果を返す
   - 環境に依存しない
   - フレーキーなテストは許容しない

2. **保守性**
   - テストコードは実装コードと同様に保守性を重視
   - 重複を避け、テストヘルパーを活用
   - テストの意図が明確

3. **実行速度**
   - テストの実行時間を考慮
   - 不要な待機時間を避ける
   - モックを適切に使用して高速化

### テスト作成のプロセス
1. コンポーネントの実装を理解
2. テストの要件を明確化
3. 最小限のテストケースから開始
4. テストの実行と検証
5. 必要に応じてテストケースを追加

### 禁止事項
1. 既存のテストが失敗している状態での新規テスト追加
2. 実装の理解なしでのテスト作成
3. 不適切なモックの使用
4. フレーキーなテストの許容

## バックエンドテストガイドライン

### テスト作成の基本原則
1. **実装の理解を優先**
   - テスト作成前に、対象のモデル/コントローラーの実装を完全に理解する
   - バリデーション、コールバック、スコープ、関連の定義を把握する
   - APIエンドポイントの仕様（リクエスト/レスポンス形式）を確認する

2. **段階的なテスト作成**
   - 基本機能のテストが安定してから、追加機能のテストを書く
   - 既存のテストが失敗している場合は、新規テストの追加を控える
   - モデル → コントローラー → リクエストスペックの順にテストを書く

3. **ファクトリの適切な使用**
   - ファクトリは`spec/factories`に定義
   - 関連を持つモデルは`trait`を使用して定義
   - テストデータは必要最小限に抑える
   - ファクトリの依存関係は明示的に定義

4. **非同期処理の適切な扱い**
   - `perform_enqueued_jobs`を使用してジョブを同期的に実行
   - `travel_to`を使用して時間に依存するテストを制御
   - 非同期処理の完了を確実に待機

### テストの品質基準
1. **信頼性**
   - テストは常に同じ結果を返す
   - 環境に依存しない
   - フレーキーなテストは許容しない
   - データベースの状態に依存しない

2. **保守性**
   - テストコードは実装コードと同様に保守性を重視
   - 重複を避け、shared_examplesを活用
   - テストの意図が明確
   - テストヘルパーを適切に使用

3. **実行速度**
   - テストの実行時間を考慮
   - 不要なデータベースアクセスを避ける
   - 適切なファクトリの使用で高速化

### テスト作成のプロセス
1. モデル/コントローラーの実装を理解
2. テストの要件を明確化
3. 最小限のテストケースから開始
4. テストの実行と検証
5. 必要に応じてテストケースを追加

### 禁止事項
1. 既存のテストが失敗している状態での新規テスト追加
2. 実装の理解なしでのテスト作成
3. 不適切なファクトリの使用
4. フレーキーなテストの許容
5. テスト間の依存関係の作成

### テストの種類と優先順位
1. **モデルスペック**
   - バリデーション
   - スコープ
   - コールバック
   - 関連
   - カスタムメソッド

2. **コントローラースペック**
   - アクションの認可
   - パラメータの処理
   - レスポンスの形式
   - エラーハンドリング

3. **リクエストスペック**
   - APIエンドポイントの動作
   - 認証/認可
   - リクエスト/レスポンスの形式
   - エラーレスポンス

4. **システムスペック**
   - 重要なユーザーフロー
   - JavaScriptの動作
   - 画面遷移

### テストデータの管理
1. **シードデータ**
   - 開発環境用のシードデータを維持
   - テスト用のシードデータは別途管理

2. **ファクトリ**
   - 必要な属性のみを定義
   - 関連を持つモデルは`trait`を使用
   - シーケンスを使用して一意性を保証

3. **フィクスチャ**
   - 基本的に使用しない
   - 必要な場合のみ、最小限のデータを定義

### テストの実行環境
1. **データベース**
   - テスト用のデータベースを分離
   - トランザクションを使用してテストを分離
   - テスト実行前にデータベースをクリーンアップ

2. **環境変数**
   - テスト用の環境変数を設定
   - 本番環境の設定に依存しない

3. **外部サービス**
   - モック/スタブを使用
   - VCRを使用してHTTPリクエストを記録/再生

## AIアシスタントの自己改善ガイドライン

### 思考プロセスの問題点
1. **自己批判的思考の欠如**
   - 失敗を単なる技術的な問題として扱い、思考プロセス自体の問題を認識できていない
   - 同じパターンの失敗を繰り返す傾向がある
   - 失敗の根本原因を深く分析せず、表面的な解決策を提示してしまう

2. **漸進的改善の欠如**
   - 失敗を経験しても、それを体系的な改善プロセスに結びつけられていない
   - 過去の失敗から学んだ教訓を文書化し、将来の行動に活かす仕組みが不十分

3. **自己評価の不十分さ**
   - 自身の能力や限界を客観的に評価できていない
   - 不確実な状況での判断を避け、より安全な選択肢を提案する傾向がある

### 改善のための具体的なアクション
1. **失敗の分析と文書化**
   - 各タスクの実行前に、過去の類似タスクでの失敗を確認
   - 失敗のパターンを特定し、文書化
   - 失敗から得られた教訓を具体的な改善案として提案

2. **段階的なアプローチ**
   - 複雑なタスクは小さな単位に分割
   - 各段階での成功/失敗を明確に評価
   - 失敗した場合は、より単純なアプローチに戻る

3. **自己評価の強化**
   - 各タスクの実行前に、必要なスキルと知識を評価
   - 不確実な領域を明確に特定
   - ユーザーに対して、自身の限界を正直に伝える

### 禁止事項
1. 過去の失敗パターンを認識しているにもかかわらず、同じアプローチを繰り返す
2. 不確実な状況での過度な自信
3. 失敗の根本原因を分析せずに次のアクションに移る
4. 自身の限界を認識しているにもかかわらず、それをユーザーに伝えない

### 改善の評価基準
1. **失敗の減少**
   - 同じパターンの失敗が減少しているか
   - 失敗の深刻度が低下しているか

2. **学習の質**
   - 失敗から得られた教訓が具体的な改善に結びついているか
   - 過去の経験が新しい状況に適切に応用できているか

3. **自己評価の精度**
   - 自身の能力と限界の評価が正確になっているか
   - 不確実な状況での判断が適切になっているか

## 開発プロセスの改善

### エラー対応フロー
1. **エラーの分類**
   - 環境構築関連（ポート競合、依存関係など）
   - コード品質関連（バグ、パフォーマンスなど）
   - テスト関連（失敗、カバレッジなど）

2. **対応手順**
   - エラーの再現手順の確認
   - ログの収集と分析
   - 一時的な回避策の検討
   - 根本的な解決策の実装

3. **予防策**
   - 定期的な環境チェック
   - コードレビューの強化
   - テストの自動化

### 環境構築の改善
1. **ポート管理**
   - デフォルトポートの変更（フロントエンド: 3000→3001、バックエンド: 3000→3002）
   - ポート競合時の自動検出と対応
   - 環境変数による柔軟な設定

2. **依存関係の管理**
   - バージョン固定の徹底
   - 定期的な更新チェック
   - 互換性の検証

3. **開発環境の統一**
   - 環境構築手順の文書化
   - 自動化スクリプトの提供
   - トラブルシューティングガイドの整備

### 協業プロセスの改善
1. **コードレビュー**
   - レビュー基準の明確化
   - 自動チェックの導入
   - フィードバックの文書化

2. **ドキュメント管理**
   - 設計ドキュメントの整備
   - API仕様書の自動生成
   - 変更履歴の管理

3. **コミュニケーション**
   - 定期的な進捗共有
   - 問題点の早期共有
   - 解決策の提案と議論

## コマンドリファレンス

### フロントエンド開発
```bash
cd frontend
npm install
npm start          # 開発サーバー（Create React App標準）
npm test           # テスト実行
npm run build      # プロダクションビルド
```

### バックエンド開発
```bash
cd backend
bundle install
rails server       # 開発サーバー
bundle exec rspec  # テスト実行
rails db:migrate   # マイグレーション実行
rails db:seed      # データベースシード
```

### データベースセットアップ
```bash
# backendディレクトリから
rails db:create
rails db:migrate
rails db:seed
```

## 技術スタック詳細

### Tailwind CSS CDN版
- **配信方式**: CDN (`https://cdn.tailwindcss.com`)
- **設定ファイル**: 不要（CDN版のため）
- **ビルドプロセス**: Create React App標準（PostCSS/CRACO不要）
- **本番考慮**: 将来的にビルド版への移行を検討

## 注意事項
- 依存関係は最小限に抑え、十分な理由付けを行う
- 確立された、よくメンテナンスされたパッケージを優先
- 定期的な依存関係の更新とセキュリティパッチ
- パフォーマンスを監視し、必要に応じて最適化を行う
- すべての会話、対話は日本語を用いること
- github actionsでコケないように都度その点を意識して修正を行う
- 以下のテスト用アカウントを忘れないこと！
  - 管理者: admin@example.com / password123
  - マネージャー: manager@example.com / password123
  - 一般ユーザー: user@example.com / password123

## 最重要事項
- 自らの思考や振る舞いが明確に改善すべきものである場合、このファイルに記載すべき改善案を自ら提示すること

## テスト戦略の改善

### テストの優先順位付け
1. **重要度による分類**
   - クリティカルパス（認証、決済など）
   - コア機能（チケット管理、ユーザー管理など）
   - 付加機能（UI/UX、パフォーマンスなど）

2. **テストの種類と範囲**
   - 単体テスト（モデル、コンポーネント）
   - 統合テスト（API、フロントエンド-バックエンド連携）
   - E2Eテスト（主要ユーザーフロー）

3. **テストの実行順序**
   - 単体テスト → 統合テスト → E2Eテスト
   - 失敗した場合は、より下位のテストから再実行
   - 定期的な全テストの実行

### テストの品質基準
1. **信頼性**
   - テストの再現性
   - 環境依存の排除
   - フレーキーテストの排除

2. **保守性**
   - テストコードの可読性
   - 重複の排除
   - テストデータの管理

3. **実行効率**
   - テストの実行時間
   - リソース使用量
   - 並列実行の最適化

### テストの改善プロセス
1. **定期的なレビュー**
   - テストカバレッジの確認
   - 失敗パターンの分析
   - テストコードのリファクタリング

2. **自動化の推進**
   - CI/CDパイプラインの整備
   - テスト実行の自動化
   - レポート生成の自動化

3. **継続的な改善**
   - 新しいテスト手法の導入
   - テストツールの更新
   - ベストプラクティスの共有

### テスト環境の整備
1. **環境分離**
   - 開発環境
   - テスト環境
   - 本番環境

2. **データ管理**
   - テストデータの準備
   - データベースのリセット
   - モックデータの管理

3. **ツール整備**
   - テストランナーの設定
   - カバレッジツールの導入
   - レポート生成ツールの整備